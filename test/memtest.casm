start:
    ${.objectA: [0] .objectB: [0] .objectC: [0]}

    ${.reportObject: ( $object $name -> )
        {print ": " print}
        {dup get printLongHex}

        mem_getSize dup 0 != ?{
            {" (size " print} {_mem_Block~ - printLong} {")" print}
            1'
        } !' ?{
            " (null)" print
        }

        {'\n' printChar}
        ret
    }

    ${.reportObjects: ( -> )
        "=== Object report ===\n" print
        {"Heap base: " print} {$_mem_heapBase get printLongHex} {'\n' printChar}
        {"First free block: " print} {$_mem_firstFreeBlock get printLongHex} {'\n' printChar}
        $.objectA "Object A" .reportObject
        $.objectB "Object B" .reportObject
        $.objectC "Object C" .reportObject
        ret
    }

    $io_print mem_setDebugger
    mem_init

    "Memory allocation test\n" print

    16 new $.objectA set
    16 new $.objectB set

    .reportObjects

    "Free object A and create object C\n" print

    $.objectA free
    32 new $.objectC set

    .reportObjects

    "Free object B, then recreate objects A and B in reverse order\n" print

    $.objectB free
    16 new $.objectB set
    16 new $.objectA set

    .reportObjects

    "Free objects B and C, then create B where C was\n" print

    $.objectB free
    $.objectC free
    32 new $.objectB set

    .reportObjects

    "Recreate C\n" print

    32 new $.objectC set

    .reportObjects

    "Resize A\n" print

    32 $.objectA resize drop'

    .reportObjects

    "Resize C\n" print

    16 $.objectC resize drop'

    .reportObjects
    ret

+io.casm
+mem.casm